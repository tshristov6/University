#include <iostream>
#include <string.h>
using namespace std;

const int MaxLenghtName = 30;
const int PATIENTS = 200;

class Date
{
private: 
int theDay, theMonth, theYear;
    public:
    Date(int = 1, int = 1, int = 2000);
    int Day() const;
    int Month() const;
    int Year() const ;
    
    void setDay(int);
    void setMonth(int);
    void setYear(int);
    void print() const;
};


Date::Date(int d,int m , int y)
{
    theDay = d;
    theMonth = m;
    theYear = y;
}

//getters
int Date::Day() const
{
return theDay;    
}

int Date::Month() const
{
return theMonth;
}

int Date::Year() const
{
    return theYear;
}
//setters
void Date::setDay(int d)
{
    theDay = d;
}

void Date::setMonth(int m)
{
    theMonth = m;
}

void Date::setYear(int y)
{
    theYear = y;
}

//format date
void Date::print() const
{
    cout <<theDay <<"." <<theMonth <<"."<<theYear <<endl;
}



class Patient
{
    public:
    Patient();
    Patient(char*,const Date&,int);
    const char* getName() const;
    Date getDOB() const;
    int getVisits() const;
    void print()const;
    
    private:
    char Name[MaxLenghtName];
    Date DOB;
    int Visits;
};

//set patient visits = 0
Patient::Patient()
{
    Visits = 0;
}

//create ne Patient 
Patient::Patient(char * n,const Date& d,int v)
{
    strcpy(Name, n);
    DOB = d;
    Visits = v;
}
//getters
const char* Patient::getName() const
{
    return Name;
}

Date Patient::getDOB()const{
    return DOB;
}

int Patient::getVisits()const
{
    return Visits;
}

//printing patient info
void Patient::print() const
{
    cout <<"Име:"<<Name <<"\n";
    cout <<"Дата: ";DOB.print();
    cout <<"Брой на визитите:"<<Visits<<endl;
}


class Doctor
{
    public:
    Doctor(char*);
    const char*getName() const;
    void registerPatient(const Patient&);
    double average() const;
    void printUpper(int) const;
    
    
    private:
    char Name[MaxLenghtName];
    Patient PatientsList[PATIENTS];
    int PatientsRegistered;
    
};

//creating a Doctor
Doctor::Doctor(char* n)
{
    strcpy(Name,n);
    PatientsRegistered = 0;
}

//getters
const char* Doctor::getName() const
{
return Name;
}

//Patient beeing registerd for doctor
void Doctor::registerPatient(const Patient& P)
{
    PatientsList[PatientsRegistered] = P;
    PatientsRegistered++;
}

//counting average visits 
double Doctor::average() const
{
    int totalVisists = 0;
    
    for (int i=0;i<PatientsRegistered; i++){
    totalVisists += PatientsList[i].getVisits();
    if(PatientsRegistered !=0){
    return double(totalVisits)/PatientsRegistered;
    }
    else return 0;
    }
    
}

//check for visits 
void Doctor::printUpper(int lim) const
{
    cout <<"Пациент с посещения над лимита!\n";
    for (int i=0;i <PatientsRegistered;i++){
        if(PatientsList[i].getVisits() > lim){
        PatientsLinst[i].print();
        }
    }
}


int main()
{
    Doctor d1("Petrov");
    int n;
    
    do
    {
        cout <<"Брой на пациентите :";
        cin >> n;
    }while(int i<0||n >PATIENTS);
    for (int i=0;i<n;i++)
    {
        cin.ignore();
        cout <<"Име на пациент: ";
        char NamePatient[MaxLenghtName];
        cin.getline(NamePatient,MaxLenghtName+1);
        int d, m, y;
        cout <<"ден: ";cin >>d;
        cout <<"месец: ";cin>>m;
        cout <<"година";cin>>y;
        Date dat(d.m.y);
        int vis;
        cout<<"Брой визити на пациент:";
        cin>>vis;
        Patient P(NamePatient,dat,vis);
        d1.registerPatient(P);
        
    }
    cout<<"Среден брой посещения при лекар я"<<d1.average()<<endl;
    if(n>0)d1.printUpper(3);
    return 0;
}
